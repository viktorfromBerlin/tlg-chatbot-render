import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackContext
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from pytz import timezone

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"
CHAT_ID = -1002609682971  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ID

MOSCOW_TZ = timezone("Europe/Moscow")

CHECKLISTS = {
    "morning": [
        "–ü—Ä–∏—à–ª–∏ —Å —Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º, –ø–µ—Ä–µ–æ–¥–µ–ª–∏—Å—å –∏ –æ—Ç–∫—Ä—ã–ª–∏ —Å–º–µ–Ω—É –≤ iiko",
        "–ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –∫–∞—Å—Å—É",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –≤ –æ–±—â–∏–π —á–∞—Ç",
        "–°—Ç–æ–ª—ã –∏ –ø–æ–¥–Ω–æ–∂–∏—è —Å—Ç–æ–ª–æ–≤ —á–∏—Å—Ç—ã–µ",
        "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –Ω–∞—Ç–µ—Ä—Ç—ã",
        "–°—Ç—É–ª—å—è –∏ –¥–∏–≤–∞–Ω—ã —á–∏—Å—Ç—ã–µ, –±–µ–∑ –∫—Ä–æ—à–µ–∫",
        "–í—Å–µ —Å—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–æ–≤–Ω–æ, —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è —Å–∏–º–º–µ—Ç—Ä–∏—è",
        "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏",
        "–û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –æ–¥–µ—Ç—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É",
        "–ú—É–∑—ã–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–π —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä",
        "–û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π",
        "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∑–∞–ª–µ, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ",
        "–¶–≤–µ—Ç–æ—á–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–ª–µ –≤—ã–≥–ª—è–¥—è—Ç —Å–≤–µ–∂–æ",
        "–û–∫–Ω–∞ —á–∏—Å—Ç—ã–µ –∏ –ø–µ—Ä–∏–º–µ—Ç—Ä –≤–æ–∫—Ä—É–≥ –Ω–∏—Ö —á–∏—Å—Ç—ã–π",
        "–ü–µ—Ä–µ–¥ —Ñ–∞—Å–∞–¥–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —á–∏—Å—Ç–æ, –≥–æ—Å—Ç–µ–≤–∞—è –ø–µ–ø–µ–ª—å–Ω–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞",
        "–ì–æ—Å—Ç–µ–≤—ã–µ —É–±–æ—Ä–Ω—ã–µ —á–∏—Å—Ç—ã–µ, –≤—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã",
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å",
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ—É-—Å—Ç–æ–ø –ª–∏—Å—Ç –ø–æ –∫—É—Ö–Ω–µ",
    ],
    "day": ["–î–Ω–µ–≤–Ω–æ–π —á–µ–∫-–ª–∏—Å—Ç ‚Äì —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. –í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3"],
    "evening": ["–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç ‚Äì —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. –í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3"],
}

user_sessions = {}

logging.basicConfig(level=logging.INFO)

async def start_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    checklist_type = update.message.text.replace("/", "")
    user_id = update.effective_user.id

    user_sessions[user_id] = {
        "type": checklist_type,
        "questions": CHECKLISTS[checklist_type],
        "answers": {},
        "skipped": [],
        "current": 0,
    }

    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions[user_id]

    questions = session["questions"]
    answers = session["answers"]
    skipped = session["skipped"]
    index = session["current"]

    while index < len(questions) and index in answers:
        index += 1

    if index < len(questions):
        session["current"] = index
        keyboard = [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]]
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùì {questions[index]}",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
    elif skipped:
        session["current"] = skipped.pop(0)
        await send_question(update, context)
    else:
        await send_report(update, context)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        return

    text = update.message.text
    session = user_sessions[user_id]
    index = session["current"]

    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        if index not in session["skipped"]:
            session["skipped"].append(index)
    else:
        session["answers"][index] = text

    session["current"] += 1
    await send_question(update, context)

async def send_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    checklist_name = session["type"]
    questions = session["questions"]
    answers = session["answers"]

    now = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M")

    report = f"üìã *{checklist_name.upper()} –ß–µ–∫-–ª–∏—Å—Ç* ({now})\n\n"
    for i, q in enumerate(questions):
        answer = answers.get(i, "‚õîÔ∏è –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞")
        report += f"*{q}*\n{answer}\n\n"

    await context.bot.send_message(
        chat_id=CHAT_ID,
        text=report,
        parse_mode="Markdown"
    )
    del user_sessions[user_id]
    await update.message.reply_text("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ!")

def reminder_job_factory(checklist_type):
    async def job():
        text = {
            "morning": "‚òÄÔ∏è –£—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç: /morning",
            "day": "üå§ –î–Ω–µ–≤–Ω–æ–π —á–µ–∫-–ª–∏—Å—Ç –∂–¥–µ—Ç –≤–∞—Å: /day",
            "evening": "üåô –í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: /evening",
        }[checklist_type]
        app = ApplicationBuilder().token(TOKEN).build()
        await app.bot.send_message(chat_id=CHAT_ID, text=text)
    return job

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("morning", start_checklist))
    app.add_handler(CommandHandler("day", start_checklist))
    app.add_handler(CommandHandler("evening", start_checklist))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_response))

    scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)
    scheduler.add_job(reminder_job_factory("morning"), trigger='cron', hour=15, minute=31)
    scheduler.add_job(reminder_job_factory("day"), trigger='cron', hour=14, minute=0)
    scheduler.add_job(reminder_job_factory("evening"), trigger='cron', hour=20, minute=0)
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
